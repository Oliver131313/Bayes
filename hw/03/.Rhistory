roc.perform.fa <-
performance(pred.fa, measure = "tpr", x.measure = "fpr")
auc.train.fa <- performance(pred.fa, measure = "auc")
auc.train.fa.val <- auc.train.fa@y.values
# Save the results to vector of AUC values for FA transformed LDA
AUC_FA[i] <- as.double(auc.train.fa.val)
}
AUC_RAW <- rep(0, 100) # Empty vector for storing results of classification.
for (i in 1:100) {
# Preprocessing
preproces.param.raw <-
fifa.raw %>% preProcess(method = c("center", "scale"))
fifa.raw.trans <- preproces.param.raw %>% predict(fifa.raw)
# Train-test split
train.index.raw <-
fifa.raw$BestPos %>% createDataPartition(p = 0.75, list = FALSE)
train.data.raw <- fifa.raw.trans[train.index.raw, ]
test.data.raw <- fifa.raw.trans[-train.index.raw, ]
# Fit the model
model.raw <- lda(BestPos ~ ., data = fifa.raw.trans)
# Predictions
predictions.raw <- model.raw %>% predict(test.data.raw)
# Evaluation
predictions.posteriors.raw <-
as.data.frame(predictions.raw$posterior[, 1])
pred.raw <-
prediction(predictions.posteriors.raw, test.data.raw$BestPos)
roc.perform.raw <-
performance(pred.raw, measure = "tpr", x.measure = "fpr")
auc.train.raw <- performance(pred.raw, measure = "auc")
auc.train.raw.val <- auc.train.raw@y.values
# Save the results to vector of AUC values
AUC_RAW[i] <- as.double(auc.train.raw.val)
}
library(BSDA)
library(latex2exp)
AUC_FA.vec <- as.double(AUC_FA)
AUC_RAW.vec <- as.double(AUC_RAW)
t.test <- t.test(x=AUC_FA,y= AUC_RAW, paired=TRUE, alternative="less")
str_glue("\t Paited t-test\t\n\n")
str_glue("\nH0: mu_1 - mu_2 >= 0\n")
str_glue("H1: mu_1 - mu_2 < 0\n\n")
str_glue("Data: {t.test$data[1]}\n\n")
str_glue("t = {t.test$statistic},\ndf = {t.test$parameter}, \np-value ~= {format(t.test$p.value, scientific=TRUE)}\n\n")
str_glue("Confidence Interval (95%):\t\t ({t.test$conf.int[1][1]}, {t.test$conf.int[1][2]})\n\n")
str_glue("Estimated mean of the differences: \t{t.test$estimate}")
# Summarizing comparison - Barplot
# Note that we don't have to standardize the data again.
fifa.fa %>%
dplyr::group_by(Pos) %>%
dplyr::summarize(Off = median(Off),
Def = median(Def),
Phys = median(Phys)) %>%
arrange(desc(Off)) %>%
pivot_longer(-Pos) %>%
ggplot(aes(x = name, y = value, fill = Pos)) +
geom_bar(stat = "identity", position = "dodge") +
labs(x="Factor", y="Scores")
# Summarizing comparison - Barplot
# Note that we don't have to standardize the data again.
fifa.fa %>%
dplyr::group_by(Pos) %>%
dplyr::summarize(Off = median(Off),
Def = median(Def),
Phys = median(Phys)) %>%
arrange(desc(Off)) %>%
pivot_longer(-Pos) %>%
ggplot(aes(x = name, y = value, fill = Pos)) +
geom_bar(stat = "identity", position = "dodge") +
labs(x="Factor", y="Scores") +
theme(legend.title = element_test("Position"))
# Summarizing comparison - Barplot
# Note that we don't have to standardize the data again.
fifa.fa %>%
dplyr::group_by(Pos) %>%
dplyr::summarize(Off = median(Off),
Def = median(Def),
Phys = median(Phys)) %>%
arrange(desc(Off)) %>%
pivot_longer(-Pos) %>%
ggplot(aes(x = name, y = value, fill = Pos)) +
geom_bar(stat = "identity", position = "dodge") +
labs(x="Factor", y="Scores") +
theme(legend.title = element_text("Position"))
# Summarizing comparison - Barplot
# Note that we don't have to standardize the data again.
fifa.fa %>%
dplyr::group_by(Pos) %>%
dplyr::summarize(Off = median(Off),
Def = median(Def),
Phys = median(Phys)) %>%
arrange(desc(Off)) %>%
pivot_longer(-Pos) %>%
ggplot(aes(x = name, y = value, fill = Pos)) +
geom_bar(stat = "identity", position = "dodge") +
labs(x="Factor", y="Scores") +
theme(legend.key = element_text("Position"))
# Summarizing comparison - Barplot
# Note that we don't have to standardize the data again.
fifa.fa %>%
dplyr::group_by(Pos) %>%
dplyr::summarize(Off = median(Off),
Def = median(Def),
Phys = median(Phys)) %>%
arrange(desc(Off)) %>%
pivot_longer(-Pos) %>%
ggplot(aes(x = name, y = value, fill = Pos)) +
geom_bar(stat = "identity", position = "dodge") +
labs(x="Factor", y="Scores") +
theme(legend. = element_text("Position"))
# Summarizing comparison - Barplot
# Note that we don't have to standardize the data again.
fifa.fa %>%
dplyr::group_by(Pos) %>%
dplyr::summarize(Off = median(Off),
Def = median(Def),
Phys = median(Phys)) %>%
arrange(desc(Off)) %>%
pivot_longer(-Pos) %>%
ggplot(aes(x = name, y = value, fill = Pos)) +
geom_bar(stat = "identity", position = "dodge") +
labs(x="Factor", y="Scores") +
theme(legend.title = element_text("Position"))
# Summarizing comparison - Barplot
# Note that we don't have to standardize the data again.
fifa.fa %>%
dplyr::group_by(Pos) %>%
dplyr::summarize(Off = median(Off),
Def = median(Def),
Phys = median(Phys)) %>%
arrange(desc(Off)) %>%
pivot_longer(-Pos) %>%
ggplot(aes(x = name, y = value, fill = Pos)) +
geom_bar(stat = "identity", position = "dodge") +
theme(legend.title = element_text("Position")) +
labs(x="Factor", y="Scores")
# Data look approximatively normal
fifa.fa %>%
dplyr::select(-Name) %>%
pivot_longer(-Pos, names_to = "Variable", values_to = "Value") %>%
ggplot(aes(x = Value, y = ..density.., color = Variable)) +
geom_histogram(position = "identity",
fill = "azure2",
alpha = 1) +
geom_density(alpha = 1, ) +
facet_grid(Variable ~ .) +
scale_color_brewer(palette = "Spectral")
AUC_FA.vec <- as.double(AUC_FA)
AUC_RAW.vec <- as.double(AUC_RAW)
t.test <- t.test(x=AUC_FA,y= AUC_RAW, paired=TRUE, alternative="less")
str_glue("\t Paited t-test\t\n\n")
str_glue("\nH0: mu_1 - mu_2 >= 0\n")
str_glue("H1: mu_1 - mu_2 < 0\n\n")
str_glue("Data: {t.test$data[1]}\n\n")
str_glue("t = {t.test$statistic},\ndf = {t.test$parameter}, \np-value ~= {format(t.test$p.value, scientific=TRUE)}\n\n")
str_glue("Confidence Interval (95%):\t\t ({t.test$conf.int[1][1]}, {t.test$conf.int[1][2]})\n\n")
str_glue("Estimated mean of the differences: \t{t.test$estimate}")
AUC_FA.vec <- as.double(AUC_FA)
AUC_RAW.vec <- as.double(AUC_RAW)
t.test <- t.test(x=AUC_FA,y= AUC_RAW, paired=TRUE, alternative="less")
str_glue("\t\t\t\t Paited t-test\t\n\n")
str_glue("\nH0: mu_1 - mu_2 >= 0\n")
str_glue("H1: mu_1 - mu_2 < 0\n\n")
str_glue("Data: {t.test$data[1]}\n\n")
str_glue("t = {t.test$statistic},\ndf = {t.test$parameter}, \np-value ~= {format(t.test$p.value, scientific=TRUE)}\n\n")
str_glue("Confidence Interval (95%):\t\t ({t.test$conf.int[1][1]}, {t.test$conf.int[1][2]})\n\n")
str_glue("Estimated mean of the differences: \t{t.test$estimate}")
AUC_FA.vec <- as.double(AUC_FA)
AUC_RAW.vec <- as.double(AUC_RAW)
t.test <- t.test(x=AUC_FA,y= AUC_RAW, paired=TRUE, alternative="less")
str_glue("\t\t\t\t Paited t-test\n\n")
str_glue("\nH0: mu_1 - mu_2 >= 0\n")
str_glue("H1: mu_1 - mu_2 < 0\n\n")
str_glue("Data: {t.test$data[1]}\n\n")
str_glue("t = {t.test$statistic},\ndf = {t.test$parameter}, \np-value ~= {format(t.test$p.value, scientific=TRUE)}\n\n")
str_glue("Confidence Interval (95%):\t\t ({t.test$conf.int[1][1]}, {t.test$conf.int[1][2]})\n\n")
str_glue("Estimated mean of the differences: \t{t.test$estimate}")
AUC_FA.vec <- as.double(AUC_FA)
AUC_RAW.vec <- as.double(AUC_RAW)
t.test <- t.test(x=AUC_FA,y= AUC_RAW, paired=TRUE, alternative="less")
str_glue("                                       Paited t-test\n\n")
str_glue("\nH0: mu_1 - mu_2 >= 0\n")
str_glue("H1: mu_1 - mu_2 < 0\n\n")
str_glue("Data: {t.test$data[1]}\n\n")
str_glue("t = {t.test$statistic},\ndf = {t.test$parameter}, \np-value ~= {format(t.test$p.value, scientific=TRUE)}\n\n")
str_glue("Confidence Interval (95%):\t\t ({t.test$conf.int[1][1]}, {t.test$conf.int[1][2]})\n\n")
str_glue("Estimated mean of the differences: \t{t.test$estimate}")
AUC_FA.vec <- as.double(AUC_FA)
AUC_RAW.vec <- as.double(AUC_RAW)
t.test <- t.test(x=AUC_FA,y= AUC_RAW, paired=TRUE, alternative="less")
str_glue("Paited t-test\n\n")
str_glue("H0: mu_1 - mu_2 >= 0\n")
str_glue("H1: mu_1 - mu_2 < 0\n\n")
str_glue("Data: {t.test$data[1]}\n\n")
str_glue("t = {t.test$statistic},\ndf = {t.test$parameter}, \np-value ~= {format(t.test$p.value, scientific=TRUE)}\n\n")
str_glue("Confidence Interval (95%):\t\t ({t.test$conf.int[1][1]}, {t.test$conf.int[1][2]})\n\n")
str_glue("Estimated mean of the differences: \t{t.test$estimate}")
AUC_FA.vec <- as.double(AUC_FA)
AUC_RAW.vec <- as.double(AUC_RAW)
t.test <- t.test(x=AUC_FA,y= AUC_RAW, paired=TRUE, alternative="less")
str_glue("Paited t-test\n\n")
str_glue("Data: {t.test$data[1]}\n\n")
str_glue("H0: mu_1 - mu_2 >= 0\n")
str_glue("H1: mu_1 - mu_2 < 0\n\n")
str_glue("t = {t.test$statistic},\ndf = {t.test$parameter}, \np-value ~= {format(t.test$p.value, scientific=TRUE)}\n\n")
str_glue("Confidence Interval (95%):\t\t ({t.test$conf.int[1][1]}, {t.test$conf.int[1][2]})\n\n")
str_glue("Estimated mean of the differences: \t{t.test$estimate}")
AUC_FA.vec <- as.double(AUC_FA)
AUC_RAW.vec <- as.double(AUC_RAW)
t.test <- t.test(x=AUC_FA,y= AUC_RAW, paired=TRUE, alternative="less")
str_glue("Paited t-test\n")
str_glue("Data: {t.test$data[1]}\n\n")
str_glue("H0: mu_1 - mu_2 >= 0\n")
str_glue("H1: mu_1 - mu_2 < 0\n\n")
str_glue("t = {t.test$statistic},\ndf = {t.test$parameter}, \np-value ~= {format(t.test$p.value, scientific=TRUE)}\n\n")
str_glue("Confidence Interval (95%):\t\t ({t.test$conf.int[1][1]}, {t.test$conf.int[1][2]})\n\n")
str_glue("Estimated mean of the differences: \t{t.test$estimate}")
AUC_FA.vec <- as.double(AUC_FA)
AUC_RAW.vec <- as.double(AUC_RAW)
t.test <- t.test(x=AUC_FA,y= AUC_RAW, paired=TRUE, alternative="less")
str_glue("Paited t-test\n")
str_glue("Data: {t.test$data[1]}\n\n")
str_glue("H0: mu_1 - mu_2 >= 0\n")
str_glue("H1: mu_1 - mu_2 < 0\n\n")
str_glue("t = {t.test$statistic},\ndf = {t.test$parameter}, \np-value ~= {format(t.test$p.value, scientific=TRUE)}\n\n")
str_glue("Confidence Interval (95%):\t\t ({t.test$conf.int[1][1]}, {t.test$conf.int[1][2]})\n")
str_glue("Estimated mean of the differences: \t{t.test$estimate}")
AUC_FA.vec <- as.double(AUC_FA)
AUC_RAW.vec <- as.double(AUC_RAW)
t.test <- t.test(x=AUC_FA,y= AUC_RAW, paired=TRUE, alternative="less")
str_glue("Paited t-test\n")
str_glue("Data: {t.test$data[1]}\n\n")
str_glue("H0: mu_1 - mu_2 >= 0\n")
str_glue("H1: mu_1 - mu_2 < 0\n\n")
str_glue("t = {round(t.test$statistic, 3)},\ndf = {t.test$parameter}, \np-value ~= {format(t.test$p.value, scientific=TRUE)}\n\n")
str_glue("Confidence Interval (95%):\t\t ({t.test$conf.int[1][1]}, {t.test$conf.int[1][2]})\n")
str_glue("Estimated mean of the differences: \t{round(t.test$estimate, 5)}")
unclass(fa$residual)[1:10, 27:40]
unclass(fa$residual)
colnames(unclass(fa$residual))
unclass(fa$residual)[1:15, 1:15]
unclass(fa$residual)[1:16, 17:31]
AUC_FA.vec <- as.double(AUC_FA)
AUC_RAW.vec <- as.double(AUC_RAW)
t.test <- t.test(x=AUC_FA,y= AUC_RAW, paired=TRUE, alternative="less")
str_glue("Paited t-test\nData: {t.test$data[1]}\n\nH0: mu_1 - mu_2 >= 0\nH1: mu_1 - mu_2 < 0\n\n
t = {round(t.test$statistic, 3)},\ndf = {t.test$parameter}, \np-value ~= {format(t.test$p.value, scientific=TRUE)}\n\nConfidence Interval (95%):\t\t ({t.test$conf.int[1][1]}, {t.test$conf.int[1][2]})\nEstimated mean of the differences: \t{round(t.test$estimate, 5)}")
AUC_FA.vec <- as.double(AUC_FA)
AUC_RAW.vec <- as.double(AUC_RAW)
t.test <- t.test(x=AUC_FA,y= AUC_RAW, paired=TRUE, alternative="less")
str_glue("Paited t-test\nData: {t.test$data[1]}\n\nH0: mu_1 - mu_2 >= 0\nH1: mu_1 - mu_2 < 0\n
t = {round(t.test$statistic, 3)},\ndf = {t.test$parameter}, \np-value ~= {format(t.test$p.value, scientific=TRUE)}\n\nConfidence Interval (95%):\t\t ({t.test$conf.int[1][1]}, {t.test$conf.int[1][2]})\nEstimated mean of the differences: \t{round(t.test$estimate, 5)}")
AUC_FA.vec <- as.double(AUC_FA)
AUC_RAW.vec <- as.double(AUC_RAW)
t.test <- t.test(x=AUC_FA,y= AUC_RAW, paired=TRUE, alternative="less")
str_glue("Paited t-test\nData: {t.test$data[1]}\n\nH0: mu_1 - mu_2 >= 0\nH1: mu_1 - mu_2 < 0\n\n
t = {round(t.test$statistic, 3)},\ndf = {t.test$parameter}, \np-value ~= {format(t.test$p.value, scientific=TRUE)}\n\nConfidence Interval (95%):\t\t ({t.test$conf.int[1][1]}, {t.test$conf.int[1][2]})\nEstimated mean of the differences: \t{round(t.test$estimate, 5)}")
AUC_FA.vec <- as.double(AUC_FA)
AUC_RAW.vec <- as.double(AUC_RAW)
t.test <- t.test(x=AUC_FA,y= AUC_RAW, paired=TRUE, alternative="less")
str_glue("Paited t-test\nData: {t.test$data[1]}\n\nH0: mu_1 - mu_2 >= 0\nH1: mu_1 - mu_2 < 0\n\n\t
t = {round(t.test$statistic, 3)},\ndf = {t.test$parameter}, \np-value ~= {format(t.test$p.value, scientific=TRUE)}\n\nConfidence Interval (95%):\t\t ({t.test$conf.int[1][1]}, {t.test$conf.int[1][2]})\nEstimated mean of the differences: \t{round(t.test$estimate, 5)}")
AUC_FA.vec <- as.double(AUC_FA)
AUC_RAW.vec <- as.double(AUC_RAW)
t.test <- t.test(x=AUC_FA,y= AUC_RAW, paired=TRUE, alternative="less")
str_glue("Paited t-test\nData: {t.test$data[1]}\n\nH0: mu_1 - mu_2 >= 0\nH1: mu_1 - mu_2 < 0\n\n
t = {round(t.test$statistic, 3)},\ndf = {t.test$parameter}, \np-value ~= {format(t.test$p.value, scientific=TRUE)}\n\nConfidence Interval (95%):\t\t ({t.test$conf.int[1][1]}, {t.test$conf.int[1][2]})\nEstimated mean of the differences: \t{round(t.test$estimate, 5)}")
AUC_FA.vec <- as.double(AUC_FA)
AUC_RAW.vec <- as.double(AUC_RAW)
t.test <- t.test(x=AUC_FA,y= AUC_RAW, paired=TRUE, alternative="less")
str_glue("Paited t-test\nData: {t.test$data[1]}\n\nH0: mu_1 - mu_2 >= 0\nH1: mu_1 - mu_2 < 0\n\n")
str_glue("t = {round(t.test$statistic, 3)},\ndf = {t.test$parameter}, \np-value ~= {format(t.test$p.value, scientific=TRUE)}\n\n")
str_glue("Confidence Interval (95%):\t\t ({t.test$conf.int[1][1]}, {t.test$conf.int[1][2]})\nEstimated mean of the differences: \t{round(t.test$estimate, 5)}")
exp([-4.00313+ 0.0794460*20+1.98017*1+(-0.00370173)*100])
exp(-4.00313+ 0.0794460*20+1.98017*1+(-0.00370173)*100)
exp(-4.00313+ 0.0794460*20+1.98017*1+(0.00370173)*100)
t.test)
t.test
t.test$conf.int
t.test$conf.int[1][2]
t.test$conf.int[1]
AUC_FA.vec <- as.double(AUC_FA)
AUC_RAW.vec <- as.double(AUC_RAW)
t.test <- t.test(x=AUC_FA,y= AUC_RAW, paired=TRUE, alternative="less")
str_glue("Paited t-test\nData: {t.test$data[1]}\n\nH0: mu_1 - mu_2 >= 0\nH1: mu_1 - mu_2 < 0\n\n")
str_glue("t = {round(t.test$statistic, 3)},\ndf = {t.test$parameter}, \np-value ~= {format(t.test$p.value, scientific=TRUE)}\n\n")
str_glue("Confidence Interval (95%):\t\t ({t.test$conf.int[1]}, {t.test$conf.int[1]})\nEstimated mean of the differences: \t{round(t.test$estimate, 5)}")
AUC_FA.vec <- as.double(AUC_FA)
AUC_RAW.vec <- as.double(AUC_RAW)
t.test <- t.test(x=AUC_FA,y= AUC_RAW, paired=TRUE, alternative="less")
str_glue("Paited t-test\nData: {t.test$data[1]}\n\nH0: mu_1 - mu_2 >= 0\nH1: mu_1 - mu_2 < 0\n\n")
str_glue("t = {round(t.test$statistic, 3)},\ndf = {t.test$parameter}, \np-value ~= {format(t.test$p.value, scientific=TRUE)}\n\n")
str_glue("Confidence Interval (95%):\t\t ({t.test$conf.int[1]}, {t.test$conf.int[2]})\nEstimated mean of the differences: \t{round(t.test$estimate, 5)}")
AUC_FA.vec <- as.double(AUC_FA)
AUC_RAW.vec <- as.double(AUC_RAW)
t.test <- t.test(x=AUC_FA,y= AUC_RAW, paired=TRUE, alternative="less")
str_glue("Paited t-test\nData: {t.test$data[1]}\n\nH0: mu_1 - mu_2 >= 0\nH1: mu_1 - mu_2 < 0\n\n")
str_glue("t = {round(t.test$statistic, 3)},\ndf = {t.test$parameter}, \np-value ~= {format(t.test$p.value, scientific=TRUE)}\n\n")
str_glue("Confidence Interval (95%):\t\t ({t.test$conf.int[1]}, {round(t.test$conf.int[2], 5)})\nEstimated mean of the differences: \t{round(t.test$estimate, 5)}")
setwd("C:/Users/kutis/OneDrive/School/1. Semester/Bayesianska analyza/Bayes/hw/03")
# Clear workspace
rm(list=ls())
# Load packages
library(tidyverse)
install.packages("bayesGARCH")
library(bayesGARCH)
#install.packages("bayesGARCH")
install.packages("tidyquant")
# Clear workspace
rm(list=ls())
#install.packages("bayesGARCH")
# install.packages("tidyquant")
# Load packages
library(tidyverse)
library(bayesGARCH)
library(tidyquant)
getSymbols("AMZN", from='2010-01-01', to='2021-12-11')
head(AMZN)
getSymbols("AMZN", from='2010-01-01', to='2021-12-11')
amzn <- head(AMZN$AMZN.Adjusted)
amzn
amzn %>%
mutate(r <- (a_close[-1] - a_close) / a_close)
amzn <- as_tibble(AMZN$AMZN.Adjusted))
getSymbols("AMZN", from='2010-01-01', to='2021-12-11')
amzn <- as_tibble(AMZN$AMZN.Adjusted)
amzn
head(amzn)
amzn <- amzn %>%
mutate(r <- (a_close[-1] - a_close) / a_close)
View(AMZN)
View(amzn)
colnames(amzn) <- "a_close"
amzn <- amzn %>%
mutate(r <- (a_close[-1] - a_close) / a_close)
amzn
amzn <- amzn %>%
mutate(r = (a_close[-1] - a_close) / a_close)
amzn <- amzn %>%
mutate(r = c(NA, (a_close[-1] - a_close) / a_close))
c(NA, (a_close[-1] - a_close) / a_close)
colnames(amzn) <- "a_close"
amzn
amznamzn <- amzn %>%
mutate(r = c(NA, (a_close[-1] - a_close) / a_close))
amzn <- as_tibble(AMZN$AMZN.Adjusted)
amzn <- amzn %>%
mutate(r = c(NA, (a_close[-1] - a_close) / a_close))
getSymbols("AMZN", from='2010-01-01', to='2021-12-11')
amzn <- as_tibble(AMZN$AMZN.Adjusted)
head(amzn)
colnames(amzn) <- "a_close"
amzn <- amzn %>%
mutate(r = c(NA, (a_close[-1] - a_close) / a_close))
amzn
amzn <- amzn %>%
mutate(r = c(a_close[-1] - a_close) / a_close))
amzn <- amzn %>%
mutate(r = c(a_close[-1] - a_close) / a_close)
amzn %>%
mutate(r = c(a_close[-1] - a_close) / a_close)
length(c(NA, (amzn$a_close[-1] - amzn$a_close) / amzn$a_close)
d
length(c(NA, (amzn$a_close[-1] - amzn$a_close) / amzn$a_close))
(amzn$a_close[-1] - amzn$a_close) / amzn$a_close)
(amzn$a_close[-1] - amzn$a_close) / amzn$a_close
colnames(amzn) <- "a_close"
amzn <- amzn %>%
mutate(r = (a_close[-1] - a_close) / a_close)
head(amzn)
tail(amzn)
getSymbols("AMZN", from='2010-01-01', to='2021-12-11')
dates <- rownames(AMZN)
amzn <- as_tibble(AMZN$AMZN.Adjusted)
head(amzn)
colnames(amzn) <- "a_close"
amzn$date <- dates
amzn <- amzn %>%
mutate(r = (a_close[-1] - a_close[-length(a_close)]) / a_close[-length(a_close)])
colnames(amzn) <- "a_close"
amzn$date <- dates
amzn <- amzn %>%
mutate(r = c(NA, (a_close[-1] - a_close[-length(a_close)]) / a_close[-length(a_close)]))
tail(amzn)
AMZN
rownames(as.data.frame(AMZN))
getSymbols("AMZN", from='2010-01-01', to='2021-12-11')
dates <- rownames(as.data.frame(AMZN))
amzn <- as_tibble(AMZN$AMZN.Adjusted)
head(amzn)
colnames(amzn) <- "a_close"
amzn$date <- dates
amzn <- amzn %>%
mutate(r = c(NA, (a_close[-1] - a_close[-length(a_close)]) / a_close[-length(a_close)]))
tail(amzn)
head(amzn)
amzn %>%
ggplot(aes(x=date, y=r)) +
geom_line()
getSymbols("AMZN", from='2010-01-01', to='2021-12-11')
dates <- rownames(as.data.frame(AMZN))
amzn <- as_tibble(AMZN$AMZN.Adjusted)
head(amzn)
colnames(amzn) <- "a_close"
amzn$date <- dates
amzn <- amzn %>%
mutate(r = c(NA, (a_close[-1] - a_close[-length(a_close)]) / a_close[-length(a_close)])) %>%
na.omit()
head(amzn)
amzn %>%
ggplot(aes(x=date, y=r)) +
geom_line()
plot(amzn$r)
plot(amzn$r, linetype="l")
plot(amzn$r, type="l")
amzn %>%
pivot_longer(-date)
amzn %>%
pivot_longer(-date) %>%
ggplot(aes(x=date, y=value, group=name)) +
geom_line() +
facet_grid("name")
amzn %>%
pivot_longer(-date) %>%
ggplot(aes(x=date, y=value, group=name)) +
geom_line() +
facet_grid("name", scales="free")
amzn %>%
pivot_longer(-date) %>%
ggplot(aes(x=date, y=value, group=name)) +
geom_line() +
facet_grid("name", scales="free") +
theme_economist()
amzn %>%
pivot_longer(-date) %>%
ggplot(aes(x=date, y=value, group=name)) +
geom_line() +
facet_grid("name", scales="free") +
theme_excel()
amzn %>%
pivot_longer(-date) %>%
ggplot(aes(x=date, y=value, group=name)) +
geom_line() +
facet_wrap("name", scales="free") +
theme_excel()
amzn %>%
pivot_longer(-date) %>%
ggplot(aes(x=date, y=value, group=name)) +
geom_line() +
facet_wrap("name", scales="free") +
theme_bw()
amzn %>%
pivot_longer(-date) %>%
ggplot(aes(x=date, y=value, group=name)) +
geom_line() +
facet_wrap("name", scales="free") +
scale_x_date()
amzn %>%
pivot_longer(-date) %>%
ggplot(aes(x=date, y=value, group=name)) +
geom_line() +
facet_wrap("name", scales="free") +
scale_x_date() +
theme_bw() +
amzn %>%
pivot_longer(-date) %>%
ggplot(aes(x=date, y=value, group=name)) +
geom_line() +
facet_wrap("name", scales="free") +
scale_x_date() +
theme_bw()
# scale_x_date() +
amzn %>%
pivot_longer(-date) %>%
ggplot(aes(x=date, y=value, group=name)) +
geom_line() +
facet_wrap("name", scales="free") +
# scale_x_date() +
theme_bw()
plot(amzn$date, amzn$r, type="l")
plot(amzn$date, amzn$r, type="l")
plot(amzn$r, type="l")
MCMC <- amzn %>% bayesGARCH(r, control = list(n.chain = 2, l.chain = 10000))
MCMC <- amzn %>% bayesGARCH(as.vector(r), control = list(n.chain = 2, l.chain = 10000))
MCMC <- amzn %>% bayesGARCH(as.vector(r), control = list(n.chain = 2, l.chain = 10000))
r <- as.vector(amzn$r)
MCMC <- bayesGARCH(r, control = list(n.chain = 2, l.chain = 10000))
r <- as.vector(amzn$r)
MCMC <- bayesGARCH(r, control = list(n.chain = 2, l.chain = 100))
plot(MCMC)
r <- as.vector(amzn$r)
MCMC <- bayesGARCH(r, control = list(n.chain = 2, l.chain = 10000))
plot(MCMC)
plot(MCMC)
citation(bayesGARCH)
citation("bayesGARCH")
is.stationary(MCMc)
#install.packages("bayesGARCH")
# install.packages("tidyquant")
install.packages("LaplacesDemon")
library(LaplacesDemon)
is.stationary(MCMC)
View(MCMC)
is.stationary(MCMC$chain1)
print(Geweke.Diagnostic(MCMC$chain1))
print(Geweke.Diagnostic(MCMC))
is.stationary(MCMC$chain1)
print(Geweke.Diagnostic(MCMC))
print(is.stationary(MCMC$chain1))
MCMC$chain1
r <- as.vector(amzn$r)
MCMC <- invisible(bayesGARCH(r, control = list(n.chain = 2, l.chain = 100000)))

R <- rep(0, 4)
R[rr] = rr/rr
r = 0
# Vypocet posteriornych parametrov
V_post <- solve(solve(V_0) + h[s - 1] * (t(X) %*% X))
lambda_post <- V_post %*% (solve(V_0) %*% lambda_0 + h[s - 1] * (t(X) %*% Y))
# Vektor na ukladanie SD pomerov
SD_l_noms[s-1, rr] <- dmvn(r, R %*% lambda_post, t(R) %*% V_post %*% R)
}
}
# Posteriorna analyza
# Vyhodenie prvych S_0 vzorkov
lambda <- lambda[(S_0 + 1):dim(lambda)[1],]
h <- h[(S_0 + 1):length(h)]
E_l <- apply(lambda, 2, mean)   # Vektor strednych hodnot parametrov
E_h <- mean(h)                  # Stredna hodnota presnosti chyby
D_l <- apply(lambda, 2, var)    # Vektor rozptylov parametrov
D_h <- var(h)                   # Rozptyl presnosti chyby
# Strukturalne parametre
alpha <- E_l[2]                 # alpha = l_2
beta <- E_l[3] + E_l[4]         # beta = l_3 + l_4
Z <- -(E_l[1] / beta)           # Z = l_1 / (l_3 + l_4)
eta <- E_l[4] / beta            # eta = l_4 / (l_3 + l_4)
# Hodnoty strukturalnych parametrov
results_struct <- tibble(alpha = alpha, beta = beta, eta=eta, Z = Z)
print(results_struct)
# NAIRU
unemp <- eta * X[3] + Z         # Rovnovazna miera nezamestnanosti U* = eta*U_t-1 + Z
# Vypocet SDs pre testy o nulovych strednych hodnotach
SD_l_noms <- SD_l_noms[(S_0 + 1):length(SD_l_noms), ]
SD_l_denom <- rep(0, 4)
for (rr in 1:4) {
R <- rep(0, 4)
R[rr] = rr / rr
r = 0
SD_l_denom[rr] <- dmvn(r, R%*%lambda_0, t(R) %*% V_0 %*% R)
}
SD_l <- apply(SD_l_noms, 2, mean) / SD_l_denom
print(SD_l, scipen=999)
# Vizualizacia
lambda_df <- as_tibble(lambda)
names(lambda_df) <- str_c("lambda", 1:4)
lambda_df$no <- seq(1, dim(lambda_df)[1])
lambda_df <- lambda_df %>% pivot_longer(-no)
ggplot(lambda_df, aes(x=no, y=value, col=name), type ="l") +
geom_line() +
facet_wrap(~name, scales = "free_y") +
xlab("Parameter") + ylab("Hodnota parametru") +
ggtitle("Konvergencia parametrov modelu pouzitim Gibbsovho vzorkovaca")
# Gewekova konvergencna diagnostika
Geweke_l <- Geweke(lambda)
CD_l <- Geweke_l$CD
Geweke_h <- Geweke(h)
CD_h <- Geweke_h$CD
# Testovanie obmedzeni
SDa_nom <- SDa_nom[(S_0 + 1):length(SDa_nom)]
SDb_nom <- SDb_nom[(S_0 + 1):length(SDb_nom)]
SDa_denom <- dnorm(0, lambda_0[4], sqrt(V_1[4, 4]))
SDb_denom <- dnorm(0, lambda_0[3], sqrt(V_1[3, 3]))
# A) BF pre eta = 0 (lambda_4 = 0)
SD_a <- mean(SDa_nom) / SDa_denom
SD_vec <- c(SD_a, 0)
# B) BF pre eta = 1 (lambda_3 = 0)
SD_b <-  mean(SDb_nom) / SDb_denom
SD_vec[2] <- SD_b
# Pravdepodobnosti jednotlivych modelov
m3 <- 1 / (1 + SD_l[1] + SD_l[2])       # eta â‚¬ (0, 1)
m1 <- SD_l[1] * m3                      # eta = 0
m2 <- SD_l[2] * m3                      # eta = 1
options(scipen=999)
print(c(m1, m2, m3), scipen=FALSE)
# Vysledky
results_model <-
data.frame(
E_Prior = c(lambda_0, h_0),
Sdev_Prior = as.vector(c(V_0[V_0 != 0], s2_0)),
E_Posterior = c(E_l, E_h),
Sdev_Posterior = c(D_l, D_h),
Geweke_CD = c(CD_l, CD_h),
BF = c(SD_l, NA), row.names = c("l_1", "l_2", "l_3", "l_4", "h")
)
print.data.frame(results_model, digits = 2)
ols <- lm(data = ger, formula = inflation ~ lag_inflation + unemp + unemp_diff)
summary(ols)
length(SD_l_noms)
V_1
norm_rnd(V_1)
h_1
h_0
1/h_0
1/h_1
ggplot(unemo)
ggplot(unemp)
unemp
X[, 3]
# NAIRU
unemp <- eta * X[, 3] + Z         # Rovnovazna miera nezamestnanosti U* = eta*U_t-1 + Z
ggplot(unemp)
plot(unemp)
plot(unemp, type="l")
# Pridaj odhadnute NAIRU DO ger datasetu
ger$nairu <- nairu
# NAIRU
nairu <- eta * X[, 3] + Z         # Rovnovazna miera nezamestnanosti U* = eta*U_t-1 + Z
# Pridaj odhadnute NAIRU DO ger datasetu
ger$nairu <- nairu
View(ger)
View(ger)
plot(x=ger$date, ger$nairu, type="l")
ger %>% ggplot(date, nairu)
ger %>% ggplot(aes(date, nairu))
plot(data=ger, x=date, y=nairu)
plot(data=ger, x=date, y=unemp)
plot(x=ger$date, y=ger$nairu)
plot(x=ger$date, y=ger$unemp)
plot(x=ger$date, y=ger$unemp, type="l")
ggplot(ger, aes(x=date)) +
geom_line(aes(y=unemp)) +
geom_line(aes(y=nairu))
ggplot(ger, aes(x=date)) +
geom_line(aes(y=unemp), color="blue") +
geom_line(aes(y=nairu), color="navy")
ggplot(ger, aes(x=date)) +
geom_line(aes(y=unemp), color="blue") +
geom_line(aes(y=nairu), color="navy") +
geom_line(aes(y=inflation), color="red")
ggplot(ger, aes(x=date)) +
geom_line(aes(y=unemp), color="blue") +
geom_line(aes(y=nairu), color="navy") +
geom_line(aes(y=inflation*100), color="red")
data_long %>%
ggplot(data = .,
aes(date, value, colour = variable)) + geom_line() +
facet_grid(rows = vars(variable), scales = "free") +
ggtitle("Time series 1969-2020") +
theme(
legend.background = element_rect(colour = "black", size = 0.5),
panel.background = element_rect(colour = "black", size = 0.5),
legend.position = "top"
)
31 - 29
2/29
*100
0.06896552 * 100
data <-  read_csv("ger_data_hw02.csv")
View(data)
View(data)
(29.63974 - 28.68292 ) / 28.68292
lag(data$cpi, 4)
(30.68355 - 29.37879) / 29.37879
(30.68355 - 29.37879) / 29.37879  100
(30.68355 - 29.37879) / 29.37879 * 100
ger %>%
mutate(inflation = ( cpi - lag(cpi, 4)) / lag(cpi, 4),
unemp_diff = lag(unemp, 4) - unemp) -> ger
ger %>%
pivot_longer(.,
cols = 2:5,
names_to = "variable",
values_to = "value") -> data_long
ger %>% mutate(lag_inflation = lag(inflation)) %>% drop_na -> ger
# clear workspace
rm(list = ls())
# Kniznice
library(tidyverse)
library(mvnfast)
# Funkcie
source("Support/norm_rnd.R")
source("Support/gamm_rnd_Koop.R")
source("Support/Geweke.R")
source("Support/momentg.R")
# Load
ger <- read_csv("/home/stepan/Documents/Uni/Master/2021_WS/Bayes/bayes_rproject/HW/ger_data_hw02.csv")
ger %>%
mutate(inflation = (cpi - lag(cpi, 4)) / cpi,
unemp_diff = unemp - lag(unemp)) -> ger
ger %>% mutate(lag_inflation = lag(inflation)) -> ger
# vytvoreni promennych ktere pak potrebujeme do regresni rocvnice
# !!!!!!!!!!! TREBA UPRAVIT TEN LAG
ger %>%
pivot_longer(.,
cols = 2:5,
names_to = "variable",
values_to = "value") %>%
ggplot(data = .,
aes(date, value, colour = variable)) + geom_line() +
facet_grid(rows = vars(variable), scales = "free") +
ggtitle("Time series 1969-2020") +
theme(
legend.background = element_rect(colour = "black", size = 0.5),
panel.background = element_rect(colour = "black", size = 0.5),
legend.position = "top"
)
ger %>% drop_na(.) -> ger
# Nastavenie apriornych parametrov
lambda_0 <- c(2, 0.9, -0.1, -0.1)
V_0 <- diag(c(0.5 ^ 2, 0.25 ^ 2, 1, 1))
nu_0 <- 10
s2_0 <- 0.75 ^ 2
h_0 <- 1 / s2_0
# Model
Y <- as.vector(ger$inflation)
X <- cbind(rep(1, dim(ger)[1]),
unname(as.matrix(ger %>% select(lag_inflation, unemp, unemp_diff)
)
)
)
# Nastavenie Gibbsovho vzorkovaca
S <- 50000 + 1
S_0 <- 30000 + 1
S_1 <- S - S_0
lambda <- mat.or.vec(S, length(lambda_0))
h <- mat.or.vec(S, 1)
# Nastavenie poc. hodnot
lambda[1,] <- lambda_0
h[1] <- h_0
# Savage-Dickey: Prazdne vektory
SDa_nom <- mat.or.vec(S, 1)
SDb_nom <- mat.or.vec(S, 1)
## Gibbsuv vzorkovac
for (s in 2:S) {
# 1. Blok - podminena hustota p(beta|h,y) ~ N(beta_1,V_1)
V_1 <- solve(solve(V_0) + h[s - 1] * (t(X) %*% X))
lambda_1 <- V_1 %*% (solve(V_0) %*% lambda_0 + h[s - 1] * (t(X) %*% Y))
lambda[s,] <- lambda_1 + norm_rnd(V_1)
# 2. blok - podminena hustota p(h|beta,y) ~ G(h_1,nu_1)
nu_1 <- length(Y) + nu_0
h_1 <- as.vector(1 / nu_1 * (
t(Y - X %*% lambda[s,]) %*% (Y - X %*% lambda[s,]) + nu_0 * 1 / h_0
)) ^ -1
h[s] <- gamm_rnd_Koop(h_1, nu_1, 1)
# A) Obmedzenie eta = 0 (zodpoveda lambda_4 = 0)
V_1 <- solve(solve(V_0) + h[s] * (t(X) %*% X))
lambda_1 <- V_1 %*% (solve(V_0) %*% lambda_0 + h[s] * (t(X) %*% Y))
SDa_nom[s] <- dnorm(0, lambda_1[4], sqrt(V_1[4, 4]))
# B) Obmedzenie eta = 1 (zodpoveda lambda_3 = 0)
V_1 <- solve(solve(V_0) + h[s] * (t(X) %*% X))
lambda_1 <- V_1 %*% (solve(V_0) %*% lambda_0 + h[s] * (t(X) %*% Y))
SDb_nom[s] <- dnorm(0, lambda_1[3], sqrt(V_1[3, 3]))
# Testovanie, ze sa jednotlive parametre rovnaju 0
SD_l_noms <- mat.or.vec(S, 4)
for (rr in 1:4) {
R <- rep(0, 4)
R[rr] = rr/rr
r = 0
# Vypocet posteriornych parametrov
V_post <- solve(solve(V_0) + h[s - 1] * (t(X) %*% X))
lambda_post <- V_post %*% (solve(V_0) %*% lambda_0 + h[s - 1] * (t(X) %*% Y))
# Vektor na ukladanie SD pomerov
SD_l_noms[s-1, rr] <- dmvn(r, R %*% lambda_post, t(R) %*% V_post %*% R)
}
}
# Posteriorna analyza
# Vyhodenie prvych S_0 vzorkov
lambda <- lambda[(S_0 + 1):dim(lambda)[1],]
h <- h[(S_0 + 1):length(h)]
E_l <- apply(lambda, 2, mean)   # Vektor strednych hodnot parametrov
E_h <- mean(h)                  # Stredna hodnota presnosti chyby
D_l <- apply(lambda, 2, var)    # Vektor rozptylov parametrov
D_h <- var(h)                   # Rozptyl presnosti chyby
# Strukturalne parametre
alpha <- E_l[2]                 # alpha = l_2
beta <- E_l[3] + E_l[4]         # beta = l_3 + l_4
Z <- -(E_l[1] / beta)           # Z = l_1 / (l_3 + l_4)
eta <- E_l[4] / beta            # eta = l_4 / (l_3 + l_4)
# Hodnoty strukturalnych parametrov
results_struct <- tibble(alpha = alpha, beta = beta, eta=eta, Z = Z)
print(results_struct)
# NAIRU
nairu <- eta * X[, 3] + Z         # Rovnovazna miera nezamestnanosti U* = eta*U_t-1 + Z
# Pridaj odhadnute NAIRU DO ger datasetu
ger %>% mutate(NAIRU = nairu) -> ger
ggplot(ger, aes(x=date)) +
geom_line(aes(y=unemp), color="blue") +
geom_line(aes(y=nairu), color="navy") +
geom_line(aes(y=inflation), color="red")
# Vypocet SDs pre testy o nulovych strednych hodnotach
SD_l_noms <- SD_l_noms[(S_0 + 1):length(SD_l_noms), ]
SD_l_denom <- rep(0, 4)
for (rr in 1:4) {
R <- rep(0, 4)
R[rr] = rr / rr
r = 0
SD_l_denom[rr] <- dmvn(r, R%*%lambda_0, t(R) %*% V_0 %*% R)
}
SD_l <- apply(SD_l_noms, 2, mean) / SD_l_denom
print(SD_l, scipen=999)
# Vizualizacia
lambda_df <- as_tibble(lambda)
names(lambda_df) <- str_c("lambda", 1:4)
lambda_df$no <- seq(1, dim(lambda_df)[1])
lambda_df <- lambda_df %>% pivot_longer(-no)
ggplot(lambda_df, aes(x=no, y=value, col=name), type ="l") +
geom_line() +
facet_wrap(~name, scales = "free_y") +
xlab("n-th Parameter") + ylab("Hodnota parametru") +
ggtitle("Konvergencia parametrov modelu pouzitim Gibbsovho vzorkovaca") +
theme(legend.position = "top")
# Gewekova konvergencna diagnostika
Geweke_l <- Geweke(lambda)
CD_l <- Geweke_l$CD
Geweke_h <- Geweke(h)
CD_h <- Geweke_h$CD
# Testovanie obmedzeni
SDa_nom <- SDa_nom[(S_0 + 1):length(SDa_nom)]
SDb_nom <- SDb_nom[(S_0 + 1):length(SDb_nom)]
SDa_denom <- dnorm(0, lambda_0[4], sqrt(V_1[4, 4]))
SDb_denom <- dnorm(0, lambda_0[3], sqrt(V_1[3, 3]))
# A) BF pre eta = 0 (lambda_4 = 0)
SD_a <- mean(SDa_nom) / SDa_denom
SD_vec <- c(SD_a, 0)
# B) BF pre eta = 1 (lambda_3 = 0)
SD_b <-  mean(SDb_nom) / SDb_denom
SD_vec[2] <- SD_b
# Pravdepodobnosti jednotlivych modelov
m3 <- 1 / (1 + SD_l[1] + SD_l[2])       # eta â‚¬ (0, 1)
m1 <- SD_l[1] * m3                      # eta = 0
m2 <- SD_l[2] * m3                      # eta = 1
options(scipen=999)
print(c(m1, m2, m3), scipen=FALSE)
# Vysledky
results_model <-
data.frame(
E_Prior = c(lambda_0, h_0),
Sdev_Prior = as.vector(c(V_0[V_0 != 0], s2_0)),
E_Posterior = c(E_l, E_h),
Sdev_Posterior = c(D_l, D_h),
Geweke_CD = c(CD_l, CD_h),
BF = c(SD_l, NA), row.names = c("l_1", "l_2", "l_3", "l_4", "h")
)
print.data.frame(results_model, digits = 2)
ols <- lm(data = ger, formula = inflation ~ lag_inflation + unemp + unemp_diff)
summary(ols)
setwd("C:/Users/kutis/OneDrive/School/1. Semester/Bayesianska analyza/Cviceni/hw/02")
# Load
ger <- read_csv("ger_data_hw02.csv")
# clear workspace
rm(list = ls())
# Kniznice
library(tidyverse)
library(mvnfast)
# Funkcie
source("Support/norm_rnd.R")
source("Support/gamm_rnd_Koop.R")
source("Support/Geweke.R")
source("Support/momentg.R")
# Load
ger <- read_csv("ger_data_hw02.csv")
ger %>%
mutate(inflation = (cpi - lag(cpi, 4)) / cpi,
unemp_diff = unemp - lag(unemp)) -> ger
ger %>% mutate(lag_inflation = lag(inflation)) -> ger
# vytvoreni promennych ktere pak potrebujeme do regresni rocvnice
# !!!!!!!!!!! TREBA UPRAVIT TEN LAG
ger %>%
pivot_longer(.,
cols = 2:5,
names_to = "variable",
values_to = "value") %>%
ggplot(data = .,
aes(date, value, colour = variable)) + geom_line() +
facet_grid(rows = vars(variable), scales = "free") +
ggtitle("Time series 1969-2020") +
theme(
legend.background = element_rect(colour = "black", size = 0.5),
panel.background = element_rect(colour = "black", size = 0.5),
legend.position = "top"
)
ger %>% drop_na(.) -> ger
# Nastavenie apriornych parametrov
lambda_0 <- c(2, 0.9, -0.1, -0.1)
V_0 <- diag(c(0.5 ^ 2, 0.25 ^ 2, 1, 1))
nu_0 <- 10
s2_0 <- 0.75 ^ 2
h_0 <- 1 / s2_0
# Model
Y <- as.vector(ger$inflation)
X <- cbind(rep(1, dim(ger)[1]),
unname(as.matrix(ger %>% select(lag_inflation, unemp, unemp_diff)
)
)
)
# Nastavenie Gibbsovho vzorkovaca
S <- 50000 + 1
S_0 <- 30000 + 1
S_1 <- S - S_0
lambda <- mat.or.vec(S, length(lambda_0))
h <- mat.or.vec(S, 1)
# Nastavenie poc. hodnot
lambda[1,] <- lambda_0
h[1] <- h_0
# Savage-Dickey: Prazdne vektory
SDa_nom <- mat.or.vec(S, 1)
SDb_nom <- mat.or.vec(S, 1)
## Gibbsuv vzorkovac
for (s in 2:S) {
# 1. Blok - podminena hustota p(beta|h,y) ~ N(beta_1,V_1)
V_1 <- solve(solve(V_0) + h[s - 1] * (t(X) %*% X))
lambda_1 <- V_1 %*% (solve(V_0) %*% lambda_0 + h[s - 1] * (t(X) %*% Y))
lambda[s,] <- lambda_1 + norm_rnd(V_1)
# 2. blok - podminena hustota p(h|beta,y) ~ G(h_1,nu_1)
nu_1 <- length(Y) + nu_0
h_1 <- as.vector(1 / nu_1 * (
t(Y - X %*% lambda[s,]) %*% (Y - X %*% lambda[s,]) + nu_0 * 1 / h_0
)) ^ -1
h[s] <- gamm_rnd_Koop(h_1, nu_1, 1)
# A) Obmedzenie eta = 0 (zodpoveda lambda_4 = 0)
V_1 <- solve(solve(V_0) + h[s] * (t(X) %*% X))
lambda_1 <- V_1 %*% (solve(V_0) %*% lambda_0 + h[s] * (t(X) %*% Y))
SDa_nom[s] <- dnorm(0, lambda_1[4], sqrt(V_1[4, 4]))
# B) Obmedzenie eta = 1 (zodpoveda lambda_3 = 0)
V_1 <- solve(solve(V_0) + h[s] * (t(X) %*% X))
lambda_1 <- V_1 %*% (solve(V_0) %*% lambda_0 + h[s] * (t(X) %*% Y))
SDb_nom[s] <- dnorm(0, lambda_1[3], sqrt(V_1[3, 3]))
# Testovanie, ze sa jednotlive parametre rovnaju 0
SD_l_noms <- mat.or.vec(S, 4)
for (rr in 1:4) {
R <- rep(0, 4)
R[rr] = rr/rr
r = 0
# Vypocet posteriornych parametrov
V_post <- solve(solve(V_0) + h[s - 1] * (t(X) %*% X))
lambda_post <- V_post %*% (solve(V_0) %*% lambda_0 + h[s - 1] * (t(X) %*% Y))
# Vektor na ukladanie SD pomerov
SD_l_noms[s-1, rr] <- dmvn(r, R %*% lambda_post, t(R) %*% V_post %*% R)
}
}
# Posteriorna analyza
# Vyhodenie prvych S_0 vzorkov
lambda <- lambda[(S_0 + 1):dim(lambda)[1],]
h <- h[(S_0 + 1):length(h)]
E_l <- apply(lambda, 2, mean)   # Vektor strednych hodnot parametrov
E_h <- mean(h)                  # Stredna hodnota presnosti chyby
D_l <- apply(lambda, 2, var)    # Vektor rozptylov parametrov
D_h <- var(h)                   # Rozptyl presnosti chyby
# Strukturalne parametre
alpha <- E_l[2]                 # alpha = l_2
beta <- E_l[3] + E_l[4]         # beta = l_3 + l_4
Z <- -(E_l[1] / beta)           # Z = l_1 / (l_3 + l_4)
eta <- E_l[4] / beta            # eta = l_4 / (l_3 + l_4)
# Hodnoty strukturalnych parametrov
results_struct <- tibble(alpha = alpha, beta = beta, eta=eta, Z = Z)
print(results_struct)
# NAIRU
nairu <- eta * X[, 3] + Z         # Rovnovazna miera nezamestnanosti U* = eta*U_t-1 + Z
# Pridaj odhadnute NAIRU DO ger datasetu
ger %>% mutate(NAIRU = nairu) -> ger
ggplot(ger, aes(x=date)) +
geom_line(aes(y=unemp), color="blue") +
geom_line(aes(y=nairu), color="navy") +
geom_line(aes(y=inflation), color="red")
# Vypocet SDs pre testy o nulovych strednych hodnotach
SD_l_noms <- SD_l_noms[(S_0 + 1):length(SD_l_noms), ]
SD_l_denom <- rep(0, 4)
for (rr in 1:4) {
R <- rep(0, 4)
R[rr] = rr / rr
r = 0
SD_l_denom[rr] <- dmvn(r, R%*%lambda_0, t(R) %*% V_0 %*% R)
}
SD_l <- apply(SD_l_noms, 2, mean) / SD_l_denom
print(SD_l, scipen=999)
# Vizualizacia
lambda_df <- as_tibble(lambda)
names(lambda_df) <- str_c("lambda", 1:4)
lambda_df$no <- seq(1, dim(lambda_df)[1])
lambda_df <- lambda_df %>% pivot_longer(-no)
ggplot(lambda_df, aes(x=no, y=value, col=name), type ="l") +
geom_line() +
facet_wrap(~name, scales = "free_y") +
xlab("n-th Parameter") + ylab("Hodnota parametru") +
ggtitle("Konvergencia parametrov modelu pouzitim Gibbsovho vzorkovaca") +
theme(legend.position = "top")
# Gewekova konvergencna diagnostika
Geweke_l <- Geweke(lambda)
CD_l <- Geweke_l$CD
Geweke_h <- Geweke(h)
CD_h <- Geweke_h$CD
# Testovanie obmedzeni
SDa_nom <- SDa_nom[(S_0 + 1):length(SDa_nom)]
SDb_nom <- SDb_nom[(S_0 + 1):length(SDb_nom)]
SDa_denom <- dnorm(0, lambda_0[4], sqrt(V_1[4, 4]))
SDb_denom <- dnorm(0, lambda_0[3], sqrt(V_1[3, 3]))
# A) BF pre eta = 0 (lambda_4 = 0)
SD_a <- mean(SDa_nom) / SDa_denom
SD_vec <- c(SD_a, 0)
# B) BF pre eta = 1 (lambda_3 = 0)
SD_b <-  mean(SDb_nom) / SDb_denom
SD_vec[2] <- SD_b
# Pravdepodobnosti jednotlivych modelov
m3 <- 1 / (1 + SD_l[1] + SD_l[2])       # eta â‚¬ (0, 1)
m1 <- SD_l[1] * m3                      # eta = 0
m2 <- SD_l[2] * m3                      # eta = 1
options(scipen=999)
print(c(m1, m2, m3), scipen=FALSE)
# Vysledky
results_model <-
data.frame(
E_Prior = c(lambda_0, h_0),
Sdev_Prior = as.vector(c(V_0[V_0 != 0], s2_0)),
E_Posterior = c(E_l, E_h),
Sdev_Posterior = c(D_l, D_h),
Geweke_CD = c(CD_l, CD_h),
BF = c(SD_l, NA), row.names = c("l_1", "l_2", "l_3", "l_4", "h")
)
print.data.frame(results_model, digits = 2)
ols <- lm(data = ger, formula = inflation ~ lag_inflation + unemp + unemp_diff)
summary(ols)
ggplot(ger, aes(x=date)) +
geom_line(aes(y=unemp), color="blue") +
geom_line(aes(y=nairu), color="navy") +
geom_line(aes(y=inflation*100), color="red")
